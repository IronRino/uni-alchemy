class Obstacle {

    field int location, road, tick, maxTick, roadPosition;
    field boolean isNandik;

    constructor Obstacle new(int road1, int maxTick1, boolean isNandik1) {

        let road = road1;
        if (road = 1) { let location = 4357; }
        if (road = 2) { let location = 4378; }
        if (road = 3) { let location = 5638; }
        if (road = 4) { let location = 5657; }

        let isNandik = isNandik1;
        if (isNandik) { do Drawing.drawNandik(location); }
        else { do Drawing.drawAmogus(location); }

        let tick = maxTick1;
        let maxTick = maxTick1;
        let roadPosition = 0;

        return this;
    }

    method int getRoadPosition(){
        return roadPosition;
    }

    method boolean tryMove() {
        let tick = tick - 1;
        if (tick = 0) {
            let tick = maxTick;
            return true;
        }
        return false;
    }

    method void move(int rotation) {
        let roadPosition = roadPosition + 1;
        if (roadPosition = 7) {
            do Output.moveCursor(0, 0);
            do Output.printString("    ");
            do Output.moveCursor(0, 0);
            if (rotation = road) {
                do Output.printString("OK");
                if (isNandik) { do Clearing.clearNandik(location); }
                else { do Clearing.clearAmogus(location); }
                return;
            }
            do Output.printString("FAIL");
            if (isNandik) { do Clearing.clearNandik(location); }
            else { do Clearing.clearAmogus(location); }
            return;
        }

        if (isNandik) { do Clearing.clearNandik(location); }
        else { do Clearing.clearAmogus(location); }
        if ((road = 1) | (road = 3)) { let location = location + 1; }
        if ((road = 2) | (road = 4)) { let location = location - 1; }
        if (isNandik) { do Drawing.drawNandik(location); }
        else { do Drawing.drawAmogus(location); }
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}